<templateSet group="React TS">
  <template name="rcc-ts" value="import * as React from &quot;react&quot;;&#10;&#10;class $TM_FILENAME_BASE$ extends React.Component {&#10; public render() {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a React component class with TS module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(filenameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TS_EXPRESSION" value="false" />
      <option name="TS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rccp-ts" value="import * as React from &quot;react&quot;;&#10;import {ReactNode} from &quot;react&quot;;&#10;&#10;export interface I$TM_FILENAME_BASE$Props {&#10;    &#10;    children: ReactNode;&#10;    &#10;}&#10;&#10;class $TM_FILENAME_BASE$ extends React.Component&lt;I$TM_FILENAME_BASE$Props&gt; {&#10; public render() {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a React component class with Interface" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(filenameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rcfc-ts" value="import React, { Component } from 'react';&#10;import PropTypes from 'prop-types';&#10;&#10;class $TM_FILENAME_BASE$ extends Component {&#10; constructor(props) {&#10;  super(props);&#10;&#10; }&#10;&#10; componentWillMount() {&#10;&#10; }&#10;&#10; componentDidMount() {&#10;&#10; }&#10;&#10; componentWillReceiveProps(nextProps) {&#10;&#10; }&#10;&#10; shouldComponentUpdate(nextProps, nextState) {&#10;&#10; }&#10;&#10; componentWillUpdate(nextProps, nextState) {&#10;&#10; }&#10;&#10; componentDidUpdate(prevProps, prevState) {&#10;&#10; }&#10;&#10; componentWillUnmount() {&#10;&#10; }&#10;&#10; render() {&#10;  return (&#10;   &lt;div&gt;&#10;&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;&#10;$TM_FILENAME_BASE$.propTypes = {&#10;&#10;};&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a React component class with PropTypes and all lifecycle methods and ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(filenameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rcjc-ts" value="class $TM_FILENAME_BASE$ extends Component {&#10; render() {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;" description="Creates a React component class with ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(filenameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rdp-ts" value="$1$.defaultProps = {&#10; $2$&#10;};" description="Creates empty defaultProps declaration" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
  </template>
  <template name="ren-ts" value="render() {&#10; return (&#10;  &lt;div&gt;&#10;   $END$&#10;  &lt;/div&gt;&#10; );&#10;}" description="When called, it should examine this.props and this.state and return a single child element." toReformat="true" toShortenFQNames="true" />
  <template name="rpc-ts" value="import React, { PureComponent } from 'react';&#10;import PropTypes from 'prop-types';&#10;&#10;class $TM_FILENAME_BASE$ extends PureComponent {&#10; render() {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;&#10;$TM_FILENAME_BASE$.propTypes = {&#10;&#10;};&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a React pure component class with PropTypes and ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(filenameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
  </template>
  <template name="rpt-ts" value="$1$.propTypes = {&#10; $2$&#10;};" description="Creates empty propTypes declaration" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
  </template>
  <template name="rrc-ts" value="import React, { Component } from 'react';&#10;import { connect } from 'react-redux';&#10;&#10;function mapStateToProps(state) {&#10; return {&#10;&#10; };&#10;}&#10;&#10;class $TM_FILENAME_BASE$ extends Component {&#10; render() {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;&#10;export default connect(&#10; mapStateToProps,&#10;)($TM_FILENAME_BASE$);" description="Creates a React component class connected to redux" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(filenameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
  </template>
  <template name="rfc" value="import React from 'react';&#10;&#10;interface I$TM_FILENAME_BASE$Props {&#10;    &#10;}&#10;&#10;const $TM_FILENAME_BASE$: React.FC&lt;I$TM_FILENAME_BASE$Props&gt; = props =&gt; {&#10; return (&#10;  &lt;div&gt;&#10;   $END$&#10;  &lt;/div&gt;&#10; );&#10;};&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a stateless React component without PropTypes and ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(filenameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="fc" value="import React from 'react';&#10;&#10;export interface I$TM_FILENAME_BASE$Props {&#10;&#10;}&#10;&#10;const $TM_FILENAME_BASE$: React.FC&lt;I$TM_FILENAME_BASE$Props&gt; = props =&gt; {&#10; return (&#10;  &lt;div&gt;&#10;   &#10;  &lt;/div&gt;&#10; );&#10;};&#10;&#10;export default $TM_FILENAME_BASE$;&#10;&#10;" description="Creates a stateless React component with PropTypes and ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(filenameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="useRR" value="const { history, location, match } = useReactRouter();" description="Imports use-react-router" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>